import pandas as pd
import os # For path manipulation

# --- Configuration ---
# Define the input and output file paths
# Make sure your original 'retail_sales_dataset.csv' is in the 'data/raw/' folder
INPUT_FILE_PATH = 'data/raw/retail_sales_dataset.csv'
# The processed data will be saved in the 'data/processed/' folder
OUTPUT_FILE_PATH = 'data/processed/retail_sales_processed.csv'

# --- 1. Load the Dataset ---
print("Starting data preprocessing for Retail Sales Analysis... ")
print(f"Loading data from: {INPUT_FILE_PATH}")

try:
    df = pd.read_csv(INPUT_FILE_PATH)
    print("Data loaded successfully! Here's a peek:")
    print(df.head())
    print("\nInitial dataset info:")
    print(df.info())
except FileNotFoundError:
    print(f"Error: The file '{INPUT_FILE_PATH}' was not found.")
    print("Please make sure 'retail_sales_dataset.csv' is in the 'data/raw/' directory.")
    exit() # Exit the script if the file isn't found

# --- 2. Data Cleaning and Type Conversion ---
print("\n Cleaning and transforming data...")

# Convert 'Date' column to datetime objects
# This is crucial for time-based analysis like trends and seasonality
if 'Date' in df.columns:
    df['Date'] = pd.to_datetime(df['Date'])
    print(" 'Date' column converted to datetime format.")
else:
    print("Warning: 'Date' column not found. Skipping date conversion.")

# --- 3. Feature Engineering (Creating new, insightful columns!) ---
print("Generating new time-based features...")

# Extract Year, Month, and Day of Week for easier analysis in Power BI
# These columns will help us spot seasonal trends and daily patterns
if 'Date' in df.columns:
    df['Year'] = df['Date'].dt.year
    df['Month'] = df['Date'].dt.month_name() # Get month names (e.g., 'January')
    df['DayOfWeek'] = df['Date'].dt.day_name() # Get day names (e.g., 'Monday')
    print(" 'Year', 'Month', and 'DayOfWeek' columns added.")
else:
    print("Warning: 'Date' column not available for feature engineering. Skipping.")


# --- 4. Verify Transformed Data ---
print("\nTransformation complete! Here's what your data looks like now (first 5 rows):")
print(df.head())
print("\nUpdated dataset info after transformations:")
print(df.info())

# --- 5. Save the Processed Data ---
# Ensure the output directory exists
output_dir = os.path.dirname(OUTPUT_FILE_PATH)
if not os.path.exists(output_dir):
    os.makedirs(output_dir)
    print(f"Created output directory: {output_dir}")

df.to_csv(OUTPUT_FILE_PATH, index=False)
print(f"\n Processed data successfully saved to: {OUTPUT_FILE_PATH}")
print("You can now import this CSV into Power BI to build your dashboard!")
